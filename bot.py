import os
import datetime
import logging
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)

load_dotenv()

from models import Teacher, Event, EventImage, SessionLocal

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ---------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è add_teacher
# ---------------------------
PHOTO, NAME, POSITION, EXPERIENCE, T_LINK = range(5)

# ---------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è add_event
# ---------------------------
(
    EV_IMG,      # 0 ‚Äî –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    EV_TITLE,    # 1 ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
    EV_DESC,     # 2 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ
    EV_DATE,     # 3 ‚Äî –¥–∞—Ç–∞
    EV_GALLERY,  # 4 ‚Äî –¥–æ–ø. —Ñ–æ—Ç–æ
    EV_ARTICLE,  # 5 ‚Äî —Å—Ç–∞—Ç—å—è
    EV_LINK      # 6 ‚Äî –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—å–∏
) = range(5, 12)

# ---------------------------
# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
# ---------------------------
os.makedirs("static/teachers", exist_ok=True)
os.makedirs("static/events", exist_ok=True)

# ==============================================================================
#                          –§–£–ù–ö–¶–ò–ò –î–õ–Ø add_teacher
# ==============================================================================

async def start_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    return PHOTO

async def receive_teacher_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        file = await update.message.document.get_file()
    else:
        await update.message.reply_text("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
        return PHOTO

    fn = f"{update.effective_chat.id}_{file.file_id}.jpg"
    path = os.path.join("static/teachers", fn)
    await file.download_to_drive(path)
    context.user_data["photo"] = fn

    await update.message.reply_text("üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return NAME

async def receive_teacher_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    return POSITION

async def receive_teacher_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["position"] = update.message.text
    await update.message.reply_text("üß™ –í–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –≥–æ–¥–∞—Ö:")
    return EXPERIENCE

async def receive_teacher_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["experience"] = update.message.text
    await update.message.reply_text(
        "üîó –ü—Ä–∏—à–ª–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ /skip_link, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."
    )
    return T_LINK

async def skip_teacher_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["link"] = None
    return await save_teacher(update, context)

async def receive_teacher_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["link"] = update.message.text
    return await save_teacher(update, context)

async def save_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    db = SessionLocal()
    teacher = Teacher(
        name=data["name"],
        position=data["position"],
        experience=data["experience"],
        photo=data["photo"],
        link=data.get("link")
    )
    db.add(teacher)
    db.commit()
    tid = teacher.id
    db.close()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω (ID {tid}).")
    return ConversationHandler.END

# ==============================================================================
#                          –§–£–ù–ö–¶–ò–ò –î–õ–Ø delete_teacher
# ==============================================================================

async def delete_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    teachers = db.query(Teacher).order_by(Teacher.id).all()
    db.close()

    if not teachers:
        return await update.message.reply_text("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for t in teachers:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{t.id} ‚Äî {t.name}",
                callback_data=f"del_teacher:{t.id}"
            )
        ])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=reply_markup
    )

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def cb_delete_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª

    # –ø–æ–ª—É—á–∞–µ–º ID
    _, tid_str = query.data.split(":")
    tid = int(tid_str)

    db = SessionLocal()
    teacher = db.query(Teacher).get(tid)
    if not teacher:
        text = f"‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å ID {tid} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    else:
        name = teacher.name
        db.delete(teacher)
        db.commit()
        text = f"üóëÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å *{name}* (ID {tid}) —É–¥–∞–ª—ë–Ω."
    db.close()

    # –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–µ
    await query.edit_message_text(text, parse_mode="Markdown")

# ==============================================================================
#                          –§–£–ù–ö–¶–ò–ò –î–õ–Ø add_event
# ==============================================================================

async def start_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["extra_images"] = []
    await update.message.reply_text(
        "üñº –ü—Ä–∏—à–ª–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ /skip_image:"
    )
    return EV_IMG

async def receive_event_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.photo[-1].get_file()
    fn = f"{update.effective_chat.id}_{file.file_id}.jpg"
    path = os.path.join("static/events", fn)
    await file.download_to_drive(path)
    context.user_data["image"] = f"events/{fn}"
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    return EV_TITLE

async def skip_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["image"] = "assets/img/placeholder.jpg"
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    return EV_TITLE

async def receive_event_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text("üìñ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    return EV_DESC

async def receive_event_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return EV_DATE

async def receive_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        dt = datetime.datetime.strptime(update.message.text, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return EV_DATE
    context.user_data["date"] = dt
    await update.message.reply_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø. —Ñ–æ—Ç–æ (–¥–æ 20) –∏–ª–∏ /done_gallery:"
    )
    return EV_GALLERY

async def receive_extra_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    imgs = context.user_data["extra_images"]
    if len(imgs) >= 20:
        return await done_gallery(update, context)

    file = await update.message.photo[-1].get_file()
    fn = f"{update.effective_chat.id}_{file.file_id}.jpg"
    path = os.path.join("static/events", fn)
    await file.download_to_drive(path)
    imgs.append(f"events/{fn}")
    await update.message.reply_text(f"üì∑ –î–æ–ø. —Ñ–æ—Ç–æ {len(imgs)}/20 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    return EV_GALLERY

async def done_gallery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—å—é –∏–ª–∏ /skip_article –¥–ª—è —Å—Å—ã–ª–∫–∏:"
    )
    return EV_ARTICLE

async def receive_event_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["article"] = update.message.text
    context.user_data["link"] = None
    return await _save_event(update, context)

async def skip_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ:")
    return EV_LINK

async def receive_event_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["link"] = update.message.text
    context.user_data["article"] = None
    return await _save_event(update, context)

async def _save_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = context.user_data
    db = SessionLocal()
    ev = Event(
        title=d["title"],
        description=d["description"],
        date=d["date"],
        image=d["image"],
        article=d.get("article"),
        link=d.get("link")
    )
    db.add(ev)
    db.flush()
    for img in d["extra_images"]:
        db.add(EventImage(event_id=ev.id, image_path=img))
    db.commit()

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15
    MAX = 15
    ids = [i for (i,) in db.query(Event.id).order_by(Event.date.desc()).all()]
    if len(ids) > MAX:
        old_ids = ids[MAX:]
        db.query(EventImage).filter(EventImage.event_id.in_(old_ids)).delete(synchronize_session=False)
        db.query(Event).filter(Event.id.in_(old_ids)).delete(synchronize_session=False)
        db.commit()

    db.close()
    await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    return ConversationHandler.END

# ==============================================================================
#                          –§–£–ù–ö–¶–ò–ò –î–õ–Ø delete_event
# ==============================================================================

async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    events = db.query(Event).order_by(Event.date.desc()).all()
    db.close()

    if not events:
        return await update.message.reply_text("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ.")

    keyboard = []
    for e in events:
        # –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤ –∫–Ω–æ–ø–∫–µ –±—ã–ª–æ ¬´ID ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫¬ª
        title = (e.title[:30] + '‚Ä¶') if len(e.title) > 30 else e.title
        keyboard.append([
            InlineKeyboardButton(
                text=f"{e.id} ‚Äî {title}",
                callback_data=f"del_event:{e.id}"
            )
        ])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def cb_delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # callback_data –∏–º–µ–µ—Ç –≤–∏–¥ "del_event:<ID>"
    _, eid_str = query.data.split(":")
    eid = int(eid_str)

    db = SessionLocal()
    ev = db.query(Event).get(eid)
    if not ev:
        text = f"‚ùå –°–æ–±—ã—Ç–∏–µ —Å ID {eid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        title = ev.title
        # —É–¥–∞–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
        db.query(EventImage).filter(EventImage.event_id == eid).delete()
        # —É–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–±—ã—Ç–∏–µ
        db.delete(ev)
        db.commit()
        text = f"üóëÔ∏è –°–æ–±—ã—Ç–∏–µ ¬´{title}¬ª (ID {eid}) —É–¥–∞–ª–µ–Ω–æ."
    db.close()

    # –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–µ
    await query.edit_message_text(text)

# ---------------------------
# –û–±—â–∏–π cancel
# ---------------------------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# ==============================================================================
#                                  MAIN
# ==============================================================================

def main():
    token = os.getenv("BOT_TOKEN")
    app = Application.builder() \
        .token(token) \
        .build()

    # Handler –¥–ª—è add_teacher
    teacher_conv = ConversationHandler(
        entry_points=[CommandHandler("add_teacher", start_teacher)],
        states={
            PHOTO:    [MessageHandler(filters.PHOTO | filters.Document.IMAGE, receive_teacher_photo)],
            NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_teacher_name)],
            POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_teacher_position)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_teacher_experience)],
            T_LINK:   [
                CommandHandler("skip_link", skip_teacher_link),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_teacher_link)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # Handler –¥–ª—è add_event
    event_conv = ConversationHandler(
        entry_points=[CommandHandler("add_event", start_event)],
        states={
            EV_IMG:     [
                MessageHandler(filters.PHOTO | filters.Document.IMAGE, receive_event_image),
                CommandHandler("skip_image", skip_image)
            ],
            EV_TITLE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_title)],
            EV_DESC:    [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_desc)],
            EV_DATE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_date)],
            EV_GALLERY:[
                MessageHandler(filters.PHOTO | filters.Document.IMAGE, receive_extra_photo),
                CommandHandler("done_gallery", done_gallery)
            ],
            EV_ARTICLE:[
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_article),
                CommandHandler("skip_article", skip_article)
            ],
            EV_LINK:   [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_link)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    # –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
    delete_teacher_h = CommandHandler("delete_teacher", delete_teacher)
    delete_event_h   = CommandHandler("delete_event",   delete_event)

    app.add_handler(
        CallbackQueryHandler(
            cb_delete_teacher,
            pattern=r"^del_teacher:"  # –±—É–¥–µ–º –ª–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ callback_data, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "del_teacher:"
        )
    )

    app.add_handler(teacher_conv)
    app.add_handler(event_conv)
    app.add_handler(delete_teacher_h)
    app.add_handler(delete_event_h)

    app.add_handler(
        CallbackQueryHandler(
            cb_delete_event,
            pattern=r"^del_event:"
        )
    )

    app.run_polling()

if __name__ == "__main__":
    main()
